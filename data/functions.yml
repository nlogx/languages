
- keyword: defining funtions
  ruby: |
    def square(x)
      x * x
    end
  js: |
    function square(x) {
      return x * x;
    }
- keyword: short functions (arrow lambda proc)
  ruby: |
    square = -> (x) { x * x }
    square = lambda {|x| x * x }
    square = Proc.new {|x| x * x}
    square.call(5) # => 10
  js: |
    const square = x => x * x;
    const square = (x, y) => { x * y }
- keyword: switch case
  ruby: |
    case var
    when 1..50
      #
    when 61..100
      #
    else
      #
    end
  js: |
    switch(var) {
      case x:
        return x;
        break;
      case y:
        return y;
        break;
      default:
        return 0;
    }
- keyword: if else conditional
  ruby: |
    if condition_1
      "condition_1"
    elsif condition_2
      "condition_2"
    else
      "other"
    end

    unless condition   # if not
    end
  js: |
    if (condition_1) {
      return "condition_1";
    } else if (condition_2) {
      return "condition_2";
    } else {
      return "other";
    }
- keyword: key statements
  ruby: |
    raise / fail
    begin, rescue, retry, ensure
    throw, catch
    break / next / redo
  js: |
    try
    catch
    throw
    finally
    break / continue
- keyword: begin end flow control
  ruby: |
    END { # runs last
       puts "Terminating Ruby Program"
    }
    BEGIN { # runs first
       puts "Initializing Ruby Program"
    }
  js: |

- keyword: while loop
  ruby: |
    while condition [do]
       # ...
    end

    # while not
    until conditional [do]
       # ...
    end

    # one line
    { ... } while condition

    # block executes at least once
    begin
      { ... }
    end while condition
  js: |
    label:    // userful in nested loop, with continue break
    while (true) {
      // ...
    }

    let i = 0;
    do {
      i += 1;
      // ...
    } while (i < 5);


- keyword: for loop
  ruby: |
    for i in 0..5
       # ...
    end
  js: |
    let step;
    for (step = 0; step < 5; step++) {
      // ...
    }

    // for...in vs. for...of
    var arr = [3, 5, 7];
    arr.foo = 'hello';

    for (var i in arr) {  // property keys
       console.log(i); // logs "0", "1", "2", "foo"
    }

    for (var i of arr) {  // property values
       console.log(i); // logs 3, 5, 7
    }
- keyword: loop each
  ruby: |
    (1..5).each { ... }
    items.each { |item| # do something }
    items.each_with_index { |item, i| items[i] }
    n.times  # without block returns a enumerable, stream from 0 to n-1 if used with map
    n.step   # counts to infinity
  js: |
    items.forEach(item => // do something );
    items.forEach((x, index) => items[index] = x * 2 );
- keyword: select filter
  ruby: |
    array.select {|x| x.even? }
    array.reject {|x| x.odd? }
  js: array.filter(x => x % 2 == 0);
- keyword: reduce
  ruby: |
    array.reduce(:+)
    array.reduce(0) {|sum, curr| sum + curr}
  js: array.reduce((sum, curr) => sum + curr);
- keyword: consecutive n elements, group every n element
  ruby: |
    array.each_cons(n).to_a
    array.each_slice(n)
#   js:
# - keyword:
#   ruby:
#   js:

# - keyword:
#   ruby:
#   js:
#####################################################################

- keyword: hash object
  ruby: |
    hash = { name: "Iff", age: 3 }
    hash.keys       # [:name, :age]
    hash[:name]
    hash[:new_key] = value;
  js: |
    const obj = { name: "Iff", age: 3 };
    Object.keys;       // ['name', 'age']
    obj.name;
    obj.new_key = value;
    obj.set(key, value);

- keyword: hash map iterator
  ruby: |
    hash.each { |key, value| #... }
  js: |
    obj.forEach((value, key) => { //... });
- keyword: class structure
  ruby: |
    class MyClass
      attr_accessor
      def initialize
        # ...
      end

      def method1 / end
      def method2(...) / end
      def self.class_method / end
      # ...
    end
  js: |
    class MyClass {
      constructor(...) {
        // ...
      }
      get something(...) { return ... }
      set something(...) {}
      method1(...) {}
      method2(...) {}
      static staticMethod(..) {}
      // ...
    }
- keyword: class example
  ruby: |
    class Person
      attr_reader :name :age
      attr_writer :country

      def initialize(name, age, country)
        @name = name,
        @age = age,
        @country = country
      end

      def country
        @country
      end

      def walk
        puts @name + ' is walking.'
      end
    end

    iff = Person.new("Iff", 3, "Tokyo")
    iff.class     # Person
  js: |
    class Person
      constructor(name, age, country) {
        this.name = name;
        this.age = age;
        this._country
      }

      get country() {
        return this._country;
      }

      set country(newCountry) {
        this._country = newCountry;
      }

      walk() {
        console.log(this.name + ' is walking.');
      }

    const iff = new User("Iff", 3, "Tokyo");
    typeof iff    // 'object'
- keyword: subclass inheritance
  ruby: |
    class Programmer < Person
      def initialize(name, age, country, language)
        super(name, age, country)
        @languages = language
      end
    end
  js: |
    class Programmer extends Person {
      constructor(name, age, country, language)) {
        super(name, age, country);
        this.language = language;
      }
    }
# - keyword:
#   ruby:
#   js:


