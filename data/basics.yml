- keyword: terminal
  ruby: |
    irb # ruby playground
    ruby file.rb
  js: |
    node // js playground
    node file.js
- keyword: control flow execution
  ruby: |
    - synchronous, one command is being executed at a time
  js: |
    - single threaded with synchronous execution model
    - asynchronous behavior user interaction, AJAX requests, timers
- keyword: import export
  ruby: |
    # file level
    require 'module'
    require_relative 'relative_path/file'
    load 'module.rb'

    # language level
    include Module  # adds methods as instance methods
    extend Module   # adds methods as class methods
  js: |
    // export
    export { name1, name2, ..., nameN };
    export let name1, name2, ..., nameN;

    export default expression;
    export default function () { ... }; // also class

    export * from ...;
    export { default } from ...;

    // import
    import defaultExport from "module-name";
    import * as name from "module-name";
    import { export as alias } from "module-name";
    import { export1 , export2 } from "module-name";
- keyword: naming convention
  ruby: |
    snake_case            # local variables, methods
    method_suffixes = ? ! # setter, bool, bang
    PascalCase            # classes, modules
  js: |
    lowerCamelCase  // objects, functions, instances
    PascalCase      // classes, constructors
- keyword: identifiers
  ruby: |
    :var      # symbol
    &var      # block
    CONST_VAR # constants
    $var      # global variable
    @@var     # class variable
    @var      # instance variable
  js: |
    _var    // private
- keyword: declaration
  ruby: var_name = "value"
  js: |
    let var; // undefined
    let varName = "value";
    const constName = "value";

######### DATE TIME ########
- keyword: date time
  ruby: |
    Date.today    # Date: 2018-11-01 ((2458424j,0s,0n))
    Time.now      # Time: 2018-11-01 15:32:07 +0900
    t = Time.new
    t.to_date
    t.to_s
    t.hour
    t.min
    t.sec
  js: |
    Date.now();            // number 1541041100273
    const d = new Date();  // object 2018-11-01T02:51:48.938Z
    Date.parse(d);
    d.getTime();
    d.getHours();
    d.getMinutes();
    d.getSeconds();
- keyword: falsy values
  ruby: |
    false
    nil
  js: |
    false
    null
    undefined
    NaN
    ''
- keyword: string interpolation
  ruby: puts "\"#{var_name}\""
  js: console.log(`${varName}`);

- keyword: string concatenation
  ruby: |
    "1" + "10"      # "110"
    "z" * 3         # "zzz"  Note: 3 * "z" won't work
    "z" * 3 + ".."  # "zzz.."
    "abc" + 123     # TypeError
    "5" * "3"       # TypeError
  js: |
    "1" + "10"        // "110"
    "z" * 3           // NaN
    "z" * 3 + ".."    // "NaN.."
    "abc" + 123       // "abc123"
    "5" * "3"         // 15
- keyword: equal
  ruby: |
    1 == 1.0        # true
    (1..5) === 3    # true
    1.eql? 1.0      # false
    123.equal? 123  # true
    "1".equal? "1"  # false (different object id)
  js: |
    123 == "123"   // true
    123 === "123"  // false
- keyword: parsing
  ruby: |
    str.to_i
    num.to_f
    int.to_s
  js: |
    parseInt(str, 10);
    parseFloat(num);
    int.toString();
- keyword: type check
  ruby: |
    obj.class
  js: |
    typeof obj
    obj.constructor.name  // more precise than typeof
    obj instanceof Type   // returns a boolean
    Object.prototype.toString.call(obj)  // '[object Type]'
- keyword: incrementing
  ruby: |
    123.next    # 124
    "abc".next  # "abd"
  js: |
    i = 123
    i++
    i--
- keyword: remove white spaces
  ruby: str.strip
  js: str.trim();
- keyword: string caps
  ruby: |
    str.upcase
    str.downcase
    str.capitalize
  js: |
    str.toUpperCase();
    str.toLowerCase();
- keyword: string index
  ruby: |
    str[i]
  js: |
    str[i];
    str.charAt(i);
- keyword: string last char
  ruby: str[-1]
  js: |
    str.slice(-1);
    str.substr(-1);
- keyword: array index
  ruby: |
    array[1]    # returns nil if index out of range
    array[-1]   # returns last item in list
  js:
    array[1]    // returns undefined if index out of range
    array[-1]   // returns undefined
- keyword: regex match
  ruby: |
    str.match(regexp) # returns a MatchData or nil
    str.scan(regexp)  # returns an array of strings
  js: |
    str.match(regexp); // returns an Array
    pattern.exec(text);
- keyword: array crud
  ruby: |
    array.push(obj)
    array << obj
  js: |
    array.push(obj);
    array.splice(index, count, items);
    array.splice(3, 1);
    // remove: modify 1 item at index 3 to null
- keyword: first n elements
  ruby: |
    objs.first(n)
    objs.take(n)
    objs[0...n]
    objs[0, n]
  js: |
    objs.slice(0, n);
    const array = [1,2,3,4,5];
    array.length = 3; // array is now [1, 2, 3]
- keyword: size count length
  ruby: |
    ary.size   # faster than ary.count
    ary.count
    ary.length
  js: |
    # ary.size() is not native js
    ary.length
    # length is highest index + 1, number including empty items
    # length only works when array key is number, not strings

- keyword: string manipulation width
  ruby: |
    ?* * 3           # "*" * 3
    'c'.center(10)   # '    c    '
  js:
- keyword: partition set
  ruby: |
    str.partition(substr)   # [head, match, tail]
  js:
#####################################################################

- keyword: random numbers strings
  ruby: |
    rand(10) # rand takes integers only
    rand(65..90).chr  # returns a random cap letter
  js: |
    Math.random()  // random num between 0, 1
    Math.floor((Math.random() * 10) + 1);
- keyword: sample
  ruby: |
    ('A'..'Z').to_a.sample(10)  # not random, no repeated values
  js:
- keyword: json parse url
  ruby: |
    str = open(url).read
    JSON.parse(str)
  js:

- keyword: sort compare list
  ruby: |
    a.sort_by { |x| x[:earnings] }
    a.sort { |x, y| y[:earnings] <=> x[:earnings] } # greatest to smallest

    # Note: sort takes 2 args, compares with <=> spaceship
    # one <=> two returns: 0 if equal
                           1 if one > two
                          -1 if one < two
  js: |
    items.sort();  // changes original array, compare func optional
    items.sort(function (a, b) {
      // ascending value, descending price
      return a.value - b.value || b.price - a.price;
    });

- keyword: randomize array items
  ruby: |
    ary.shuffle
  js: |
    function shuffle(a) {
      for (let i = a.length - 1; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1));
          [a[i], a[j]] = [a[j], a[i]];
      }
      return a;
    }  // shuffle(ary);

- keyword: cover include contain item in a list
  ruby: |
    ('a'..'z').cover?('yellow')  # => true
    ('a'..'z').include?('yellow')  # => false
    ('yellaa'..'yellzz').include?('yellow')  # => true
  js: |
    ['a', 'b', 'c'].includes('a')  // true
    ['a', 'b', 'c'].includes('a', 2)  // searching from index 2, so false
# - keyword:
#   ruby:
#   js:





